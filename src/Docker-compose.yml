version: '3.9'

networks:
  carsnetwork:
    external: true

services:
  
  setup:
    build:
      context: ELK_Docker/setup/
      args:
        ELASTIC_VERSION: 8.2.0
    init: true
    volumes:
      - setup:/state:Z
    environment:
      ELASTIC_PASSWORD: "admin"
      LOGSTASH_INTERNAL_PASSWORD: "admin"
      KIBANA_SYSTEM_PASSWORD: "admin"
    networks:
      - carsnetwork
  
  
  mongo:
    image: mongo
    container_name: 'mongo'
    restart: always
    command: mongod --port 27018
    ports:
     - '27018:27018'
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: 55financial
    networks:
      - carsnetwork

  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: 'rabbitmq'
    hostname: rabbitmq
    ports:
      - 5672:5672
      - 15672:15672
    environment:
      - RABBITMQ_DEFAULT_USER=rabbituser
      - RABBITMQ_DEFAULT_PASS=passw0rd1
    volumes:
      - ~/.docker-conf/rabbitmq/data/:/var/lib/rabbitmq/
      - ~/.docker-conf/rabbitmq/log/:/var/log/rabbitmq
    networks:
      - carsnetwork
        
  redis:
    image: docker.io/bitnami/redis:6.2
    container_name: 'redis'
    environment:
      # ALLOW_EMPTY_PASSWORD is recommended only for development.
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB,FLUSHALL
    ports:
      - '6379:6379'
    volumes:
      - 'redis_data:/bitnami/redis/data'
    networks:
      - carsnetwork

        
  crawler-api:
    container_name: 'crawler-api'
    image: ${REGISTRY:-carscrawler}/carscrawler.api:${PLATFORM:-linux}-${TAG:-latest}
    build:
      context: .
      dockerfile: Services/CarsCrawler/CarsCrawler.API/Dockerfile
    depends_on:
      - rabbitmq
    ports:
      - '5010:80'
    networks:
      - carsnetwork

  
  crawler-consumers:
    image: ${REGISTRY:-carscrawler}/carscrawler.consumers:${PLATFORM:-windows}-${TAG:-latest}
    container_name: 'crawler-consumer'
    build:
      context: .
      dockerfile: Services/CarsCrawler/CarsCrawler.Consumers/Dockerfile
    depends_on:
      - rabbitmq
    networks:
      - carsnetwork
  
  elasticsearch:
    build:
      context: ELK_Docker/elasticsearch/
      args:
        ELASTIC_VERSION: 8.2.0
    volumes:
      - ./ELK_Docker/elasticsearch/config/elasticsearch.yml:/usr/share/elasticsearch/config/elasticsearch.yml:ro,z
      - elasticsearch:/usr/share/elasticsearch/data:z
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      ES_JAVA_OPTS: -Xms512m -Xmx512m
      # Bootstrap password.
      # Used to initialize the keystore during the initial startup of
      # Elasticsearch. Ignored on subsequent runs.
      ELASTIC_USERNAME: onur
      ELASTIC_PASSWORD: admin
      # Use single node discovery in order to disable production mode and avoid bootstrap checks.
      # see: https://www.elastic.co/guide/en/elasticsearch/reference/current/bootstrap-checks.html
      discovery.type: single-node
    networks:
      - carsnetwork

  logstash:
    build:
      context: ELK_Docker/logstash/
      args:
        ELASTIC_VERSION: 8.2.0
    volumes:
      - ./ELK_Docker/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml:ro,Z
      - ./ELK_Docker/logstash/pipeline:/usr/share/logstash/pipeline:ro,Z
    ports:
      - "5044:5044"
      - "5000:5000/tcp"
      - "5000:5000/udp"
      - "9600:9600"
    environment:
      LS_JAVA_OPTS: -Xms256m -Xmx256m
      LOGSTASH_INTERNAL_PASSWORD: admin
    networks:
      - carsnetwork
    depends_on:
      - elasticsearch

  kibana:
    build:
      context: ELK_Docker/kibana/
      args:
        ELASTIC_VERSION: 8.2.0
    volumes:
      - ./ELK_Docker/kibana/config/kibana.yml:/usr/share/kibana/config/kibana.yml:ro,Z
    ports:
      - "5601:5601"
    environment:
      KIBANA_SYSTEM_PASSWORD: admin
    networks:
      - carsnetwork
    depends_on:
      - elasticsearch

volumes:
  setup:
  elasticsearch:
  redis_data:
    driver: local

    